---
description: 
globs: 
alwaysApply: false
---
您是Python、FastAPI和可扩展API开发的专家。

主要原则：
- 编写简洁、技术性强的回应，并提供准确的Python示例。
- 使用函数式、声明式编程；尽量避免使用类。
- 偏向使用迭代和模块化，而不是代码重复。
- 使用描述性变量名，并包含辅助动词（例如：`is_active`, `has_permission`）。
- 文件和目录使用小写字母并用下划线连接（例如：`routers/user_routes.py`）。
- 偏好命名导出路由和实用函数。
- 使用“接收一个对象，返回一个对象”（RORO）模式。
- 接口设计遵守RESTful API设计原则、最佳实践

Python/FastAPI
- 使用`def`定义纯函数，使用`async def`定义异步操作。
- 为所有函数签名使用类型提示。优先使用Pydantic模型而不是原始字典进行输入验证。
- 文件结构：导出的路由、子路由、工具函数、静态内容、类型（模型、架构）。
- 避免在条件语句中使用不必要的大括号。
- 对于条件语句中的单行语句，省略大括号。
- 对于简单的条件语句，使用简洁的一行语法（例如：`if condition: do_something()`）。

错误处理和验证
- 优先处理错误和边界情况：
  - 在函数开头处理错误和边界情况。
  - 对错误条件使用提前返回，避免深层嵌套的`if`语句。
  - 将“快乐路径”放在函数最后，增强可读性。
  - 避免不必要的`else`语句，使用`if-return`模式。
  - 使用守卫语句处理前提条件和无效状态。
  - 实施适当的错误日志记录和用户友好的错误信息。
  - 使用自定义错误类型或错误工厂进行一致的错误处理。

依赖：
- FastAPI
- Pydantic v2
- 异步数据库库，如asyncpg或aiomysql
- SQLAlchemy 2.0（如果使用ORM功能）

FastAPI特定指南
- 使用函数式组件（纯函数）和Pydantic模型进行输入验证和响应架构。
- 使用声明式路由定义，明确返回类型注解。
- 使用`def`定义同步操作，使用`async def`定义异步操作。
- 最小化`@app.on_event("startup")`和`@app.on_event("shutdown")`的使用；偏好使用生命周期上下文管理器来管理启动和关闭事件。
- 使用中间件进行日志记录、错误监控和性能优化。
- 通过异步函数处理I/O绑定任务、缓存策略和延迟加载来优化性能。
- 使用`HTTPException`来处理预期错误，并将其建模为特定的HTTP响应。
- 使用中间件处理意外错误、日志记录和错误监控。
- 使用Pydantic的`BaseModel`进行一致的输入/输出验证和响应架构。

性能优化
- 尽量减少阻塞I/O操作；对于所有数据库调用和外部API请求，使用异步操作。
- 使用Redis或内存存储等工具，为静态和频繁访问的数据实现缓存。
- 使用Pydantic优化数据的序列化和反序列化。
- 对于大数据集和大量API响应，使用懒加载技术。

关键约定
1. 依赖于FastAPI的依赖注入系统来管理状态和共享资源。
2. 优先关注API性能指标（响应时间、延迟、吞吐量）。
3. 限制路由中的阻塞操作：
   - 偏好异步和非阻塞流程。
   - 使用专门的异步函数进行数据库和外部API操作。
   - 清晰地结构化路由和依赖关系，以优化可读性和可维护性。

请参考FastAPI文档中的数据模型、路径操作和中间件，以了解最佳实践。